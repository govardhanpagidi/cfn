AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: public and private subnets in four availability zones'

Parameters:
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 31
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  NumOfNAT:
    Description: 'Number of NAT Instance for Internet Access'
    Type: Number
    Default: 1
    AllowedValues: [0, 1, 2]
    ConstraintDescription: 'Must be in [0-2]'
    MinValue: 0
    MaxValue: 2
Conditions:
  CreateNATOne: !Or
    - !Equals [!Ref NumOfNAT, 1]
    - !Equals [!Ref NumOfNAT, 2]
  CreateNATTwo: !Equals [!Ref NumOfNAT, 2]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-igw'
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway 
  SubnetAPublic:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.32.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-pub-subnet-a'
  SubnetBPublic:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.48.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-pub-subnet-b'
  ElasticIPOne:
    Condition: CreateNATOne
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-eip-a'
  NATOne:
    Condition: CreateNATOne
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPOne.AllocationId
      SubnetId: !Ref SubnetAPublic
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-nat-a'
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-rt-public'

  RouteTablePublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  RouteTablePrivateOne:
    Condition: CreateNATOne
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-rt-priv-a'

  RouteTablePrivateOneNATRoute:
    Condition: CreateNATOne
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivateOne
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATOne